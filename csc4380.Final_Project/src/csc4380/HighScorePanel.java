/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csc4380;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.Reader;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;


/**
 *
 * @author aaron
 */

public class HighScorePanel extends javax.swing.JPanel {

    /**
     * Creates new form HighScores
     * @throws java.io.FileNotFoundException
     */
    final static int NUM_SCORES = 5;
    static Score[] highScores = new Score[NUM_SCORES];
    
    
    public HighScorePanel(Score[] scores) throws FileNotFoundException {
        initComponents();
        highScores = scores;
        setScores();
    }
    
    public void setScores() throws FileNotFoundException
    {
            lblScore0.setText(highScores[0].print());
            lblScore1.setText(highScores[1].print());
            lblScore2.setText(highScores[2].print());
            lblScore3.setText(highScores[3].print());
            lblScore4.setText(highScores[4].print());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblScore0 = new javax.swing.JLabel();
        lblScore1 = new javax.swing.JLabel();
        lblScore2 = new javax.swing.JLabel();
        lblScore3 = new javax.swing.JLabel();
        lblScore4 = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblScore0.setText("jLabel1");

        lblScore1.setText("jLabel2");

        lblScore2.setText("jLabel3");

        lblScore3.setText("jLabel4");

        lblScore4.setText("jLabel5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(319, 319, 319)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblScore1)
                            .addComponent(lblScore0)
                            .addComponent(lblScore2)
                            .addComponent(lblScore3)
                            .addComponent(lblScore4))))
                .addContainerGap(340, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(btnBack)
                .addGap(59, 59, 59)
                .addComponent(lblScore0)
                .addGap(18, 18, 18)
                .addComponent(lblScore1)
                .addGap(18, 18, 18)
                .addComponent(lblScore2)
                .addGap(18, 18, 18)
                .addComponent(lblScore3)
                .addGap(18, 18, 18)
                .addComponent(lblScore4)
                .addContainerGap(141, Short.MAX_VALUE))
        );
    }// </editor-fold>                        

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        //View topFrame = (View) SwingUtilities.getWindowAncestor(this);
        //topFrame.changeContext("main screen");
    }

    

    private void formComponentShown(java.awt.event.ComponentEvent evt) {          
        /*
        try{
        setScores();
        }catch(FileNotFoundException e){try {
            throw e;
            } catch (FileNotFoundException ex) {
                Logger.getLogger(HighScorePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
}
*/
    }                                   

    public Score getHighScore(int i)
    {
        return highScores[i];
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel lblScore0;
    private javax.swing.JLabel lblScore1;
    private javax.swing.JLabel lblScore2;
    private javax.swing.JLabel lblScore3;
    private javax.swing.JLabel lblScore4;
    // End of variables declaration                   

    
    
    boolean isHighScore(int score)
    {
        for(Score h : highScores)
        {
            if(h.getScore() < score)
            {
                return true;
            }
        }
        return false;
    }
    
    void putNewHighScore(String name, int score)
    {
        int indexOfSmallest = 0;
        int smallestVal = highScores[0].getScore();
        for(int i = 0; i < 5; i++)
        {
            if(highScores[i].getScore() < smallestVal)
            {
                smallestVal = highScores[i].getScore();
                indexOfSmallest = i;
            }
        }
        highScores[indexOfSmallest] = new Score(name, score);
    }
}

